package io.robelabr.fundametals;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import dev.lyze.gdxtinyvg.drawers.TinyVGShapeDrawer;
import io.robelabr.fundametals.graphics.Assets;

/**
 * <p><strong>Main</strong> boot‑straps the LibGDX environment, creates the game
 * world, registers the renderer & input handler, and drives the global update
 * cycle.</p>
 *
 * <p>Because the project uses the standard multi‑module LibGDX template
 * (core + lwjgl3), <code>Main</code> belongs in the <code>core</code> module and
 * is referenced from the <code>Lwjgl3Launcher</code> generated by the project
 * wizard.</p>
 *
 * @author Robel Abraham
 */
public class Main extends ApplicationAdapter {

    /** Logical width in world units.  Viewport scales with {@link #worldCam}. */
    public static final int VIRTUAL_WIDTH  = 1920;

    /** Logical height in world units. */
    public static final int VIRTUAL_HEIGHT = 1080;

    // ---------------------------------------------------------------------
    // Engine objects
    // ---------------------------------------------------------------------

    private OrthographicCamera worldCam;
    private OrthographicCamera uiCam;
    private SpriteBatch batch;
    private ShapeRenderer shapes;
    private TinyVGShapeDrawer drawer;

    private World              world;
    private Renderer           renderer;
    private InputHandler       input;

    // ---------------------------------------------------------------------
    // LibGDX lifecycle
    // ---------------------------------------------------------------------

    @Override
    public void create() {
        // Camera initialised to show the full virtual resolution.
        worldCam = new OrthographicCamera(VIRTUAL_WIDTH, VIRTUAL_HEIGHT);
        worldCam.position.set(VIRTUAL_WIDTH / 2f, VIRTUAL_HEIGHT / 2f, 0);
        worldCam.update();

        // UI camera fixed in position for the toolbox and other elements
        uiCam = new OrthographicCamera();
        uiCam.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        uiCam.update();

        batch     = new SpriteBatch();
        shapes    = new ShapeRenderer();
        drawer    = new TinyVGShapeDrawer(batch); // Use default – replace with custom for UI.

        world     = new World();
        renderer  = new Renderer(world, worldCam, uiCam, batch, shapes, drawer);
        input     = new InputHandler(world, worldCam, renderer);

        // resize(1920, 1080);
        Gdx.input.setInputProcessor(input);
        Assets.getInstance().loadAll();
        Assets.getInstance().finishLoading();
        world.unlockAll();
    }

    @Override
    public void render() {
        float delta = Gdx.graphics.getDeltaTime();

        // Step simulation.
        world.update(delta);

        // Clear & draw.
        Gdx.gl.glClearColor(0.11f, 0.12f, 0.14f, 1f); // Nord theme‑ish backdrop
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        renderer.render(delta);
    }

    @Override
    public void resize(int width, int height) {
        Gdx.graphics.setWindowedMode(width, height);
        renderer.resize(width, height);
    }

    @Override
    public void dispose() {
        renderer.dispose();
        drawer.dispose();
    }
}
